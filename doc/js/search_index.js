var search_data = {"index":{"searchIndex":["adaptibrew","brewer","helpers","object","testbrewer","testgit","testhelpers","clear()","clear()","clear_log()","clone()","log()","new()","refresh()","script()","setup()","setup()","setup()","teardown()","test_base_path()","test_clear_output()","test_clone_will_skip_if_repo_present()","test_log()","test_log_methods()","test_refresh()","test_script_and_output()","test_time()","test_wait()","time()","wait()","write_log()"],"longSearchIndex":["adaptibrew","brewer","helpers","object","testbrewer","testgit","testhelpers","adaptibrew#clear()","brewer#clear()","helpers#clear_log()","adaptibrew#clone()","helpers#log()","brewer::new()","adaptibrew#refresh()","brewer#script()","testbrewer#setup()","testgit#setup()","testhelpers#setup()","testgit#teardown()","testbrewer#test_base_path()","testbrewer#test_clear_output()","testgit#test_clone_will_skip_if_repo_present()","testhelpers#test_log()","testhelpers#test_log_methods()","testgit#test_refresh()","testbrewer#test_script_and_output()","testhelpers#test_time()","testbrewer#test_wait()","helpers#time()","brewer#wait()","helpers#write_log()"],"info":[["Adaptibrew","","Adaptibrew.html","","<p>This is the &#39;manager&#39; for the adaptibrew repo. It handles cloning\nand such.\n"],["Brewer","","Brewer.html","","<p>This is the main brewer class. This contains all the methods needed to\ncontrol a brew rig setup with …\n"],["Helpers","","Helpers.html","",""],["Object","","Object.html","",""],["TestBrewer","","TestBrewer.html","",""],["TestGit","","TestGit.html","",""],["TestHelpers","","TestHelpers.html","",""],["clear","Adaptibrew","Adaptibrew.html#method-i-clear","(dir='adaptibrew')","<p>Danger zone…\n"],["clear","Brewer","Brewer.html#method-i-clear","()","<p>Clears the `@out` array\n"],["clear_log","Helpers","Helpers.html#method-i-clear_log","(log)","<p>Truncates the entire log\n"],["clone","Adaptibrew","Adaptibrew.html#method-i-clone","(path=nil)",""],["log","Helpers","Helpers.html#method-i-log","()","<p>Returns the default location for the log file. A different log file is used\nfor testing\n"],["new","Brewer","Brewer.html#method-c-new","()",""],["refresh","Adaptibrew","Adaptibrew.html#method-i-refresh","()","<p>This can also serve as an update method\n"],["script","Brewer","Brewer.html#method-i-script","(script, params=nil)","<p>Runs an adaptibrew script Output will be stored in `@out&#39;\n"],["setup","TestBrewer","TestBrewer.html#method-i-setup","()",""],["setup","TestGit","TestGit.html#method-i-setup","()",""],["setup","TestHelpers","TestHelpers.html#method-i-setup","()",""],["teardown","TestGit","TestGit.html#method-i-teardown","()",""],["test_base_path","TestBrewer","TestBrewer.html#method-i-test_base_path","()","<p>Make sure that the path is correct. I hate working with paths. TODO: Test\nthis on windows\n"],["test_clear_output","TestBrewer","TestBrewer.html#method-i-test_clear_output","()","<p>Tests if the adaptibrew output (@brewer.out) can be cleared. This invloves\nwriting to the log file\n"],["test_clone_will_skip_if_repo_present","TestGit","TestGit.html#method-i-test_clone_will_skip_if_repo_present","()","<p>Testing a not-so-failed case of cloning\n"],["test_log","TestHelpers","TestHelpers.html#method-i-test_log","()",""],["test_log_methods","TestHelpers","TestHelpers.html#method-i-test_log_methods","()",""],["test_refresh","TestGit","TestGit.html#method-i-test_refresh","()","<p>`refresh` calls both `clone` and `clear`. oh that sweet, sweet code\ncoverage\n"],["test_script_and_output","TestBrewer","TestBrewer.html#method-i-test_script_and_output","()",""],["test_time","TestHelpers","TestHelpers.html#method-i-test_time","()",""],["test_wait","TestBrewer","TestBrewer.html#method-i-test_wait","()","<p>Don&#39;t really know how to test this one… Just running the code for\ncoverage and to pick up any stray …\n"],["time","Helpers","Helpers.html#method-i-time","()","<p>Gets the current date and time Formatted as: 03/07/2017 14:26\n"],["wait","Brewer","Brewer.html#method-i-wait","(time=30)","<p>Waits for `time` seconds. Pretty simple stuff.\n"],["write_log","Helpers","Helpers.html#method-i-write_log","(log, lines)","<p>Writes each `line` element to `logs/output` with a timestamp. Example:\n[03/07/2017 14:27]: it worked …\n"]]}}